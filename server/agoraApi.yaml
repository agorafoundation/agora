openapi: 3.0.2
info:
  title: Agora API
  version: 1.0.0
  description: Agora's super cool API. You can find out more about Agora at [https://freeagora.org](https://freeagora.org)
  termsOfService: https://freeagora.org/terms/
  contact:
    email: api@freeagora.org
  license:
    name: BSD 3-Clause License
    url: https://opensource.org/licenses/BSD-3-Clause
tags:
  - name: Tags
    description: Manage global tags, tags are used to relate other entities and are associated to enities by users using the Tagged object.
paths:
  /tags:
    get:
      tags:
        - Tags
      summary: Retrieves all available tags, provide limit and offset for pagnation, top limit 100.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags:
        - Tags
      summary: Save a new tag. If the name of the tag already exists the current tag will not be duplicated. If the ownedBy member is provided with an existing tag name the owner will be updated to the provided value.  Only the tag value is required.
      requestBody:
        description: Include a Tag object to save in JSON format *NOTE* - Only the tag member is required, id will be ignored, lastUsed will be used if provided and override the default behavior of assigning the authenticed user id, lastUsed will be updated to the current time.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/ShortTag"
      responses:
        "201":
          description: New Tag created
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Tag"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "200":
          description: Updated existing record - the tag name already existed, current record used.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Tag"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /tags/{id}:
    get:
      tags:
        - Tags
      summary: Retrieves existing tag by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the tag to retrieve
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Tag"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Tags
      summary: Deletes existing tag by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the tag to delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Tag"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /tags/Tagged:
    post:
      tags:
        - Tagged
      summary: Associates a tag with an entity (by provided type and id), and a user (by user id). 
      requestBody:
        description: Include a Tagged object to save in JSON format including a tag property with the .tag property containing the name of the tag *NOTE* - For the Tag object, only the tag member is required, id will be ignored, lastUsed will be used if provided and override the default behavior of assigning the authenticed user id, lastUsed will be updated to the current time.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Tagged"
      responses:
        "201":
          description: New Tag association created
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Tagged"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "200":
          description: Updated existing record - the tag association already existed, current record used.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Tagged"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /tags/tagged/{entityType}/{entityId}:
    get:
      tags:
        - Tagged
      summary: Retrieves Tags associated with an entity (by type and id)
      parameters:
        - in: path
          name: entityType
          schema:
            type: string
            enum: ["unknown", "workspace", "topic", "resource", "user"]
            default: "unknown"
            description: Type of the entity to find associated tags for
        - in: path
          name: entityId
          schema:
            type: integer
            description: id of the entity to find associated tags for
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Tags"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /tags/tagged/{tag}/{entityType}/{entityId}:
    delete:
      tags:
        - Tagged
      summary: Deletes a tag association, removing the tag (tagName) from an entity (by entityType, entityId) for owner (authorized api or client session user)
      parameters:
        - in: path
          name: tag (tag name)
          schema:
            type: string
            description: name given to tag to remove the association from
        - in: path
          name: entityType
          schema:
            type: string
            enum: ["unknown", "workspace", "topic", "resource", "user"]
            default: "unknown"
            description: Type of the entity to remove the association from
        - in: path
          name: entityId
          schema:
            type: integer
            description: id of the entity to remove the association from
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Tag"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /workspaces:
    get:
      tags:
        - Workspaces
      summary: Retrieves all available workspaces, provide limit and offset for pagnation, top limit 100.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Workspace/response"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags:
        - Workspaces
      summary: Checks database for the workspace in requestBody by Id. If found and ownedBy flag set, updates existing workspace. If not found, creates new workspace.
      requestBody:
        description: Include a Workspace object to save in JSON format *NOTE* - Only the workspace member is required, id will be ignored.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Workspace/request"
      responses:
        "201":
          description: New Workspace created
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Workspace/response"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "200":
          description: Updated existing record - the workspace name already existed, current record used.
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Workspace/response"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /workspaces/{id}:
    get:
      tags:
        - Workspaces
      summary: Retrieves existing workspace by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the workspace to retrieve
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Workspace/response"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Workspaces
      summary: Deletes existing workspace by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the workspace to delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Workspace"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /workspaces/topics/{workspaceId}:
    get:
      tags:
        - Workspaces
      summary: Retrieves all topics for a given workspace.
      parameters:
        - in: path
          name: workspaceId
          schema:
            type: integer
          description: id of the workspace to retrieve corresponding Topics
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Topic/response"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /workspaces/shared:
     get:
      tags:
      - Workspaces
      summary: Get all shared workspaces, provide limit and offset for pagnation, top limit 100.
      description: Retrieve all shared workspaces.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              example:
                sharedWorkspaces: [shared workspace details]
  /workspaces/shared/{workspaceId}:
    get:
      tags:
      - Workspaces
      summary: Get shared workspace by ID
      description: Retrieve shared workspace details by ID.
      parameters:
        - in: path
          name: workspaceId
          required: true
          description: The ID of the shared workspace.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              example:
                sharedWorkspace: {shared workspace details}
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
      - Workspaces
      summary: Remove shared workspace by ID
      description: Remove a shared workspace by its ID from the shared_entities table.
      parameters:
        - in: path
          name: workspaceId
          required: true
          description: The ID of the shared workspace to be removed.
          schema:
            type: string
      responses:
        '200':
          description: Successfully removed
          content:
            application/json:
              example:
                success: true
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /workspaces/topics/shared/{workspaceId}:
    get:
      tags:
      - Workspaces
      summary: Get all topics for shared workspace by ID
      description: Retrieves all topics for a given workspace.
      parameters:
        - in: path
          name: workspaceId
          required: true
          description: The ID of the workspace.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              example:
                topicsList: [topic details]
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /topics:
    get:
      tags:
        - Topics
      summary: Retrieves all available topics, provide limit and offset for pagnation, top limit 100.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic/response"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags:
        - Topics
      summary: Checks database for the topic in requestBody by Id. If found and ownedBy flag set, updates existing topic. If not found, creates new topic.
      requestBody:
        description: Include a Topic object to save in JSON format *NOTE* - Only the topic member is required, id will be ignored.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Topic/request"
      responses:
        "201":
          description: New Topic created
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Topic/response"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "200":
          description: Updated existing record - the topic name already existed, current record used.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Topic/response"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /topics/shared:
    get:
      tags:
        - Topics
      summary: Retrieves all available shared topics
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic/response"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /topics/{id}:
    get:
      tags:
        - Topics
      summary: Retrieves existing topic by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the topic to retrieve
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Topic/response"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Topics
      summary: Deletes existing topic by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the topic to delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Topic"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /resources:
    get:
      tags:
        - Resources
      summary: Retrieves all available resources, provide limit and offset for pagnation, top limit 100.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource/response"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags:
        - Resources
      summary: Checks database for the resource in requestBody by Id. If found and ownedBy flag set, updates existing resource. If not found, creates new resource.
      requestBody:
        description: Include a Resource object to save in JSON format *NOTE* - Only the resouce member is required, id will be ignored.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Resource/request"
      responses:
        "201":
          description: New Resource created
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Resource/response"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "200":
          description: Updated existing record - the resource name already existed, current record used.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Resource/response"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /resources/user/{id}:
    get:
      tags:
        - Resources
      summary: Retrieves all available & active resources for a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the user to retrive their active resources
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Resource/response"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /resources/shared:
    get:
      tags:
        - Resources
      summary: Retrieves all available shared resources
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Resource/response"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
  /resources/{id}:
    get:
      tags:
        - Resources
      summary: Retrieves existing resource by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the resource to retrieve
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Resource/response"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Resources
      summary: Deletes existing resource by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the resource to delete
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Success"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /discussions/workspace/{id}:
    get:
      tags:
        - Discussions
      summary: Gets the discussion by workspace ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the workspace
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Discussions"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Discussions
      summary: "Updates discussion using workspace ID"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the workspace
      requestBody:
        description: Json for updated text
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discussion_text:
                  type: string
                  description: Text that you wish to update
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Discussions"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags:
        - Discussions
      summary: "Create a new discussion using workspace ID"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the workspace
      requestBody:
        description: Json for new text
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discussion_text:
                  type: string
                  description: Text that you wish to start the discussion with
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Discussions"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /discussions/topic/{id}:
    get:
      tags:
        - Discussions
      summary: Gets the discussion by topic ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the topic
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Discussions"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    patch:
      tags:
        - Discussions
      summary: "Updates discussion using topic ID"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the topic
      requestBody:
        description: Json for updated text
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discussion_text:
                  type: string
                  description: Text that you wish to update
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Discussions"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    post:
      tags:
        - Discussions
      summary: "Create a new discussion using topic id"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the topic
      requestBody:
        description: Json for updated text
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: Text that you wish to update
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Discussions"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /discussions/rating/{commentid}:
    post:
      tags:
        - Discussions
      summary: "Posts the rating for a specific comment"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the comment
      requestBody:
        description: Rating JSON
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: boolean
                userId:
                  type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Comment"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Discussions
      summary: "Removes the rating for a comment"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the comment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Comment"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /discussions/comment:
    post:
      tags:
        - Discussions
      summary: "Post a new comment"
      requestBody:
        description: Comment JSON requestBody
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Comment"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Comment"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /discussions/comment/{id}:
    patch:
      tags:
        - Discussions
      summary: "Change a currently existing comment"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the comment
      requestBody:
        description: Comment edit JSON object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                comment_text:
                  type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Comment"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Discussions
      summary: "Deletes a currently existing comment"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the comment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Comment"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /search/:
    get:
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: The keyword / query
          required: true
        - in: query
          name: type
          schema:
            type: string
            enum: ["all", "topics", "workspaces", "users", "resources"]
            default: "all"
          description: Filter out by users, topics, workspaces, and resources. Can also leave as default which will search all categories
      tags:
        - Search
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Search"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /ai/suggest:
    get:
      tags:
        - AI
      summary: Retrieves existing suggested article
      parameters:
        - in: mode
          name: mode
          schema:
            type: string
          description: Paper or Notes
        - in: resourceId
          name: resourceId
          schema:
            type: string
          description: The Resource Id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/AI"
        headers:
          x-agora-message-title:
            schema:
              type: string
            description: Title of Agora API message
          x-agora-message-message:
            schema:
              type: string
            description: Message of Agora API message
  /friends/allFriends:
    get:
      summary: Get all friends
      description: Retrieve all friends for a specific user.
      parameters:
        - name: userId
          in: query
          description: The ID of the user to retrieve friends for.
          required: true
          schema:
            type: string
      tags:
        - Friending
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "Returned all Friends"
                friends:
                  - userId: "123"
                    username: "friend1"
                  - userId: "456"
                    username: "friend2"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /friends/sendFriendRequest:
    post:
      tags:
        - Friending
      summary: Send a friend request
      requestBody:
        description: Send a friend request to another user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
              required:
                - userId
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "Friend Request Sent"
                result: "Success"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /friends/requestResponse:
    post:
      summary: Accept a friend request
      description: Accept a friend request from another user.
      parameters:
        - name: friendship_id
          in: query
          description: The ID of the friend request to accept.
          required: true
          schema:
            type: string
      tags:
        - Friending
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "Friend Request Accepted"
                result: "Success"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      summary: Deny a friend request
      description: Deny a friend request from another user.
      parameters:
        - name: friendship_id
          in: query
          description: The ID of the friend request to deny.
          required: true
          schema:
            type: string
      tags:
        - Friending
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "Friend Request Denied"
                result: "Success"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /friends/deleteFriend:
    delete:
      tags:
        - Friending
      summary: Delete a friend by ID
      description: Remove a friend by their friendship ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friendshipId:
                  type: string
              required:
                - friendshipId
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "Removed friend"
                result: "Success"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError" 
  /friends/unreadRequests:
    get:
      summary: Get unaccepted friend requests
      description: Retrieve a list of unaccepted friend requests for the authenticated user.
      tags:
        - Friending
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "Returned all non friends"
                data:
                  - friendRequest1
                  - friendRequest2
                  - friendRequest3
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /friends/getResources:
    get:
      tags:
        - Friending
      summary: Get resources for friending
      description: Retrieve the authenticated user, their friends, unread friend requests, and the number of unread friend requests.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "Returned all user details"
                data: Authenticated user, friends, friend requests and friend request count
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /user/email/{email}:
    get:
      tags:
      - Users
      summary: Get user by email
      description: Retrieve user by email.
      parameters:
        - in: path
          name: email
          required: true
          description: The email address of the user.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "User retrieved"
                user: user details
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /user/search/{username}:
    get:
      tags:
      - Users
      summary: Get users by username
      description: Retrieve users by username.
      parameters:
        - in: path
          name: partial username
          required: true
          description: The partial username of the user.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "Users retrieved"
                user: user details
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /user/userId/{userId}:
    get:
      tags:
      - Users
      summary: Get active user by user ID
      description: Retrieve active user by user ID.
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              example:
                x-agora-message-title: "Success"
                x-agora-message-detail: "User retrieved"
                user: user details
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /shared/shareworkspace:
    post:
      tags:
      - Sharing
      summary: Share a workspace with another user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  type: string
                  description: The ID of the workspace to be shared.
                  example: '123'
                entityType:
                  type: string
                  description: Type of entity being shared.
                  example: 'workspace'
                shareUserId:
                  type: string
                  description: The id of the user with whom to share the workspace.
                  example: '123'
                ownerUserId:
                  type: string
                  description: The id of the user that owns the workspace.
                  example: '123'
                permissionLevel:
                  type: string
                  description: The permission level for the shared user.
                  enum: [view, edit, discussion]
                  example: view
                canCopy:
                  type: boolean
                  description: Whether user can copy workspace or not.
                  example: false
      responses:
        '200':
          description: Success response.
          content:
            application/json:
              example:
                message: Workspace shared successfully
                sharedEntityId: "123"
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /shared/removeShare:
    delete:
      tags:
      - Sharing
      summary: Remove a shared user from a workspace by ID.
      parameters:
        - name: entityId
          in: query
          description: The ID of the workspace from which to remove the shared user.
          required: true
          schema:
            type: string
            example: '123'
        - name: sharedUserId
          in: query
          description: The ID of the user to be removed from the shared workspace.
          required: true
          schema:
            type: string
            example: "sharedUser123"
      responses:
        '200':
          description: Success response.
          content:
            application/json:
              example:
                message: Shared user removed successfully
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /shared/shared-entity/{entityId}:
    get:
      tags:
      - Sharing
      summary: Get all shared users by workspace ID
      description: Retrieve all shared users related to a specific workspace ID.
      parameters:
        - in: path
          name: entityId
          required: true
          schema:
            type: string
          description: The ID of the workspace for which shared users should be retrieved.
          example: '123'
      responses:
        '200':
          description: Successful response. Returns a list of shared users.
          content:
            application/json:
              example:
                - entityId: '123'
                  entityType: workspace
                  shareUserId: '456'
                  ownerUserId: '789'
                  permissionLevel: view
                  canCopy: false
                - entityId: '123'
                  entityType: workspace
                  shareUserId: '789'
                  ownerUserId: '456'
                  permissionLevel: edit
                  canCopy: true
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /shared/getPermission:
    get:
      tags:
      - Sharing
      summary: Get permission for a user
      description: Retrieve the permission for a specific user.
      parameters:
        - in: query
          name: entityId
          required: true
          schema:
            type: string
          description: The ID of the entity for which the permission level should be retrieved.
          example: '123'
      responses:
        '200':
          description: Successful response. Returns the permission level.
          content:
            application/json:
              example:
                permission_level: edit
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /shared/updatePermission:
    put:
      tags:
      - Sharing
      summary: Update permission level for a shared entity
      description: Update the permission level of a shared entity (e.g., workspace) for a specific user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  type: string
                  description: The ID of the entity (e.g., workspace) for which the permission level should be updated.
                  example: '123'
                sharedUserId:
                  type: string
                  description: The ID of the user for whom the permission level should be updated.
                  example: user123
                permissionLevel:
                  type: string
                  description: The new permission level for the shared user.
                  example: view
      responses:
        '200':
          description: Successful response. Returns a message indicating successful permission update.
          content:
            application/json:
              example:
                message: Permission updated successfully for the shared user.
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
servers:
  - url: http://localhost:4200/api/v1/auth
  - url: http://freeagora.org/api/v1/auth
components:
  securitySchemes:
    basicAuth: # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  schemas:
    ShortTag:
      type: object
      required:
        - tag
      properties:
        id:
          type: integer
          description: Assigned automatically for new tags, used to update existing tag if provided
        tag:
          type: string
          description: The tag name
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
        lastUsed:
          type: string
          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object
      example:
        tag: Learning Python
    Tag:
      type: object
      required:
        - tag
      properties:
        id:
          type: integer
          description: Assigned automatically for new tags, used to update existing tag if provided
        tag:
          type: string
          description: The tag name
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
        lastUsed:
          type: string
          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object
      example:
        id: -1
        tag: Learning Python
        ownedBy: 1
        lastUsed: 2022-08-07T14:04:17.935Z
    Tags:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    Tagged:
      type: object
      required:
        - tag
        - entityType
        - entityId
      properties:
        id:
          type: integer
          description: Assigned automatically for new tags, used to update existing tag if provided
        tag:
          type: object
          $ref: "#/components/schemas/Tag"
          description: Tag that is being associated with a user and entity, Tag.tag property should contain the name of the tag to associate
        entityType:
          type: string
          enum: ["unknown", "workspace", "topic", "resource", "user"]
          default: "unknown"
          description: Type of the entity that is being associated with the tag
        entityId:
          type: integer
          description: Id of the entity that is being associated with the tag
        userId:
          type: integer
          description: Id of the user that is associating this tag to the entity
        lookupCount:
          type: integer
          description: incremented when user finds entity association via this tag, tracks popularity of this tag
        lastUsed:
          type: string
          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object, will be automatically set when saved
        active:
          type: boolean
          description: Active status, inactive items will not be returned in most queries
      example:
        id: -1
        tag: 
          id: -1
          tag: Learning Python
          ownedBy: 1
          lastUsed: 2022-08-07T14:04:17.935Z
        entityType: "resource"
        entityId: 1
        userId: 1
        lookupCount: -1
        lastUsed: 2022-08-07T14:04:17.935Z
        active: true
    Workspace:
      request:
        id: -1
        tag:
        type: object
        required:
          - workspaceName
        properties:
          id:
            type: integer
            description: Assigned automatically for new workspaces, used to update existing workspace if provided
            uniqueItems: true
          version:
            type: integer
            description: tracks the changes to workspaces and is automatically incremented on updates
          workspaceName:
            type: string
            description: The tag
          workspaceDescription:
            type: string
            description: Description of the workspace
          workspaceImage:
            type: string
            description: filename of the associated image for the workspace
          active:
            type: boolean
            description: Active status, inactive items will not be returned in most queries
          completable:
            type: boolean
            description: Completable workspaces monitor progress of users through topics
          visibility:
            type: string
            enum: ["private", "public"]
            default: "public"
            description: Share visibily, defaults to public
          createTime:
            type: timestamp
            description: Automatically generated timestamp of record creation
          ownedBy:
            type: integer
            description: Id of the user that first generated the tag
        example:
          workspaceId: -1
          workspaceName: "Learn how to use Agora"
          workspaceDescription: "Follow the tutorials and other resources provided to learn the Agora system."
          workspaceImage: "myImage.png"
          active: true
          completable: true
          visibility: "private"
          topics: [2, 3]
      response:
        type: object
        required:
          - workspaceName
        properties:
          id:
            type: integer
            description: Assigned automatically for new workspaces, used to update existing workspace if provided
            uniqueItems: true
          version:
            type: integer
            description: tracks the changes to workspaces and is automatically incremented on updates
          workspaceName:
            type: string
            description: The tag
          workspaceDescription:
            type: string
            description: Description of the workspace
          workspaceImage:
            type: string
            description: filename of the associated image for the workspace
          active:
            type: boolean
            description: Active status, inactive items will not be returned in most queries
          completable:
            type: boolean
            description: Completable workspaces monitor progress of users through topics
          visibility:
            type: string
            enum: ["private", "public"]
            default: "public"
            description: Share visibily, defaults to public
          createTime:
            type: timestamp
            description: Automatically generated timestamp of record creation
          ownedBy:
            type: integer
            description: Id of the user that first generated the tag
        example:
          rid: 1
          id: 1
          workspaceVersion: 1
          workspaceName: "Learn how to use Agora"
          workspaceDescription: "Follow the tutorials and other resources provided to learn the Agora system."
          workspaceImage: "myImage.png"
          active: true
          completable: true
          visibility: "private"
          version: 1
          createTime: 2022-11-02T19:37:11.672Z
    Workspaces:
      type: array
      items:
        $ref: "#/components/schemas/Workspace"
    Topic:
      request:
        type: object
        required:
          - topicName
          - resources
          - resourceRequired
        properties:
          topicId:
            type: integer
            description: Assigned automatically for new topics, used to update existing topic if provided
            uniqueItems: true
          topicType:
            type: integer
            description: The type
          topicName:
            type: string
            description: The tag
          topicDescription:
            type: string
            description: Description of the topic
          topicImage:
            type: string
            description: filename of the associated image for the topic
          topicHtml:
            type: string
            description: Embedded HTML
          assessmentId:
            type: integer
            description: assessment tag
          activityId:
            type: integer
            description: activity tag
          hasAssessment:
            type: boolean
            description: Whether topic has assessment
          hasActivity:
            type: boolean
            description: Whether topic has activity
          active:
            type: boolean
            description: Active status, inactive items will not be returned in most queries
          visibility:
            type: string
            enum: ["private", "public"]
            default: "public"
            description: Share visibily, defaults to public
          createTime:
            type: timestamp
            description: Automatically generated timestamp of record creation
          ownedBy:
            type: integer
            description: Id of the user that first generated the tag
          resources:
            type: array
            description: List of resources for the topic
          resourceRequired:
            type: array
            description: Should always be true for every resource in resource array
        example:
          topicId: -1
          topicType: 1
          topicName: "Understanding the Agora Dashboard"
          topicDescription: "Follow the tutorials and other resources provided to learn the Agora Dashboard"
          topicImage: "myImage.png"
          topicHtml: '<div><img src="myImage.png"></div>'
          hasActivity: false
          hasAssessment: false
          activityId: -1
          assessmentId: -1
          active: true
          visibility: "private"
          resources: [ 1, 2, 4 ]
          resourcesRequired: [ true, true, true ]
      response:
        type: object
        required:
          - workspaceName
        properties:
          id:
            type: integer
            description: Assigned automatically for new workspaces, used to update existing workspace if provided
            uniqueItems: true
          version:
            type: integer
            description: tracks the changes to workspaces and is automatically incremented on updates
          workspaceName:
            type: string
            description: The tag
          workspaceDescription:
            type: string
            description: Description of the workspace
          workspaceImage:
            type: string
            description: filename of the associated image for the workspace
          active:
            type: boolean
            description: Active status, inactive items will not be returned in most queries
          completable:
            type: boolean
            description: Completable workspaces monitor progress of users through topics
          visibility:
            type: string
            enum: ["private", "public"]
            default: "public"
            description: Share visibily, defaults to public
          createTime:
            type: timestamp
            description: Automatically generated timestamp of record creation
          ownedBy:
            type: integer
            description: Id of the user that first generated the tag
        example:
          rid: 1
          id: 1
          workspaceVersion: 1
          workspaceName: "Learn how to use Agora"
          workspaceDescription: "Follow the tutorials and other resources provided to learn the Agora system."
          workspaceImage: "myImage.png"
          active: true
          completable: true
          visibility: "private"
          version: 1
          createTime: 2022-11-02T19:37:11.672Z
    Workspaces:
      type: array
      items:
        $ref: "#/components/schemas/Workspace"
    Topic:
      type: object
      required:
        - topicName
      properties:
        id:
          type: integer
          description: Assigned automatically for new topics, used to update existing topic if provided
          uniqueItems: true
        topicType:
          type: integer
          description: The type
        topicName:
          type: string
          description: The tag
        topicDescription:
          type: string
          description: Description of the topic
        topicImage:
          type: string
          description: filename of the associated image for the topic
        topicHtml:
          type: string
          description: Embedded HTML
        assessmentId:
          type: integer
          description: assessment tag
        activityId:
          type: integer
          description: activity tag
        hasAssessment:
          type: boolean
          description: Whether topic has assessment
        hasActivity:
          type: boolean
          description: Whether topic has activity
        active:
          type: boolean
          description: Active status, inactive items will not be returned in most queries
        visibility:
          type: string
          enum: ["private", "public"]
          default: "public"
          description: Share visibily, defaults to public
        createTime:
          type: timestamp
          description: Automatically generated timestamp of record creation
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
      example:
        id: 1
        topicType: 1
        topicName: "Understanding the Agora Dashboard"
        topicDescription: "Follow the tutorials and other resources provided to learn the Agora Dashboard"
        topicImage: "myImage.png"
        topicHtml: '<div><img src="myImage.png" width="500" height="500"></div>'
        assessmentId: 1
        hasActivity: false
        hasAssessment: false
        activityId: 1
        active: true
        visibility: "private"
        createTime: "2022-08-07T06:58:53.744Z"
        ownedBy: 1
    Topics:
      type: array
      items:
        $ref: "#/components/schemas/Topic"
    Discussions:
      type: object
      properties:
        parent_id:
          type: integer
          description: The ID of the parent topic / workspace
          uniqueItems: true
        parent_type:
          type: string
          description: The type of the parent
        discussion_text:
          type: string
          description: The text of the original discussion post
        discussion_comments:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Comment"
          description: Array of the comment objects made on a post, and their user ID
      example:
        parent_id: 1
        parent_type: topic
        discussion_text: Hello There!
        discussion_comments:
          - id: 1
            parent_id: 1
            parent_type: topic
            comment_text: This is my comment!
            user_id: 24
            created_at: "2022-08-07T06:58:53.744Z"
            updated_at: "2022-08-07T06:59:53.744Z"
            likes: 1
            dislikes: 6
          - id: 2
            parent_id: 1
            parent_type: topic
            comment_text: Another comment!
            user_id: 42
            created_at: "2022-08-07T06:58:53.744Z"
            updated_at: "2022-08-07T06:59:53.744Z"
            likes: 6
            dislikes: 2
    Comment:
      type: object
      properties:
        id:
          type: integer
        parent_id:
          type: integer
        parent_type:
          type: string
        comment_text:
          type: string
        user_id:
          type: integer
        created_at:
          type: timestamp
        updated_at:
          type: timestamp
        likes:
          type: integer
        dislikes:
          type: integer
    AI:
      type: object
      properties:
        citations:
          type: array
        keywords:
          type: array
      example:
        citations:
          - title: 'GPT-3: Language Models are Few-Shot Learners'
            authors: Tom B. Brown et al.
            publication: arXiv
            publicationDate: 2020
            link: https://arxiv.org/abs/2005.14165,
            summary: This paper introduces GPT-3, a state-of-the-art language model, and demonstrates its ability to perform various language tasks with minimal training.
        keywords:
          - "quality sources"
          - "research"
          - "keyword search"
          - "information retrieval"
          - "citations"
          - "large language models"
    Search:
      type: object
      properties:
        search:
          type: string
        timeElapsed:
          type: integer
        results:
          type: array
          items: 
            type: object
            $ref: '#/components/schemas/SearchItem'
      example:
        search: "Hello There!"
        timeElapsed: 123456
        results:
          - type: topic
            id: 1234
            main: Hello There!
            secondary: Some description!!!!
          - type: workspace
            id: 3421
            main: Hello There Everyone!
            secondary: I want to welcome you!
          - type: user
            id: 1234
            main: HelloThere!23
            secondary: John Doe 
          - type: resource
            id: 1928
            main: HelloThere! This is a resource for you!
            secondary: This is a resource description!
    SearchItem:
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        main:
          type: string
        secondary:
          type: string
      example:
        type: user
        main: JohnDoe123
        secondary: John Doe
    Resource:
      type: object
      required:
        - resourceName
      properties:
        id:
          type: integer
          description: Assigned automatically for new resources, used to update existing resource if provided
          uniqueItems: true
        resourceType:
          type: string
          description: The type
        resourceName:
          type: string
          description: The tag
        resourceDescription:
          type: string
          description: The synopsis
        resourceContentHtml:
          type: string
          description: Additional description
        resourceImage:
          type: string
          description: filename of the associated image for the resource
        resourceLink:
          type: string
          description: hyperlink to referenced resource
        isRequired:
          type: integer
          description: Not required status, required resources are necessary for ...
        active:
          type: boolean
          description: Active status, inactive items will not be returned in most queries
        visibility:
          type: string
          enum: ["private", "public"]
          default: "public"
          description: Share visibily, defaults to public
        createTime:
          type: timestamp
          description: Automatically generated timestamp of record creation
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
      example:
        id: 1
        resourceType: 1
        resourceName: "Dashboard Screenshot"
        resourceDescription: "The included screenshot shows the prototype Agora Dashboard"
        resourceContentHtml: '<div><img src="myImage.png" width="500" height="500"></div>'
        resourceImage: "myImage.png"
        resourceLink: "https://resourcelink.com/"
        isRequired: 1
        active: true
        visibility: "private"
        createTime: "2022-08-07T06:58:53.744Z"
        ownedBy: 1
    Resources:
      type: array
      items:
        $ref: "#/components/schemas/Resource"
  responses:
    BadRequest:
      description: The HyperText Transfer Protocol (HTTP) 400 Bad Request response status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing). See the x-agora-message-title and x-agora-message-detail response parameters for more detail.
      headers:
        x-agora-message-title:
          schema:
            type: string
          description: Title of Agora API message
        x-agora-message-message:
          schema:
            type: string
          description: Message of Agora API message
    UnauthorizedError:
      description: Authentication information is missing or invalid - In basic HTTP authentication, a request contains a header field in the form of Authorization - Basic <credentials>, where credentials is the Base64 encoding of ID and password joined by a single colon. See the x-agora-message-title and x-agora-message-detail response parameters for more detail.
      headers:
        x-agora-message-title:
          schema:
            type: string
          description: Title of Agora API message
        x-agora-message-message:
          schema:
            type: string
          description: Message of Agora API message
    ForbiddenError:
      description: The credentials provided in the Authorization header did not authorize the user to take the requested action. See the x-agora-message-title and x-agora-message-detail response parameters for more detail.
      headers:
        x-agora-message-title:
          schema:
            type: string
          description: Title of Agora API message
        x-agora-message-message:
          schema:
            type: string
          description: Message of Agora API message
    NotFoundError:
      description: The requested resource was not found. Check id provided or see the x-agora-message-title and x-agora-message-detail response parameters for more detail.
      headers:
        x-agora-message-title:
          schema:
            type: string
          description: Title of Agora API message
        x-agora-message-message:
          schema:
            type: string
          description: Message of Agora API message
security:
  - basicAuth: []